// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: pb/v1/cqless.proto

package cqless

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CQLessService_ListCQLesss_FullMethodName  = "/demo.v1.CQLessService/ListCQLesss"
	CQLessService_GetCQLess_FullMethodName    = "/demo.v1.CQLessService/GetCQLess"
	CQLessService_CreateCQLess_FullMethodName = "/demo.v1.CQLessService/CreateCQLess"
	CQLessService_UpdateCQLess_FullMethodName = "/demo.v1.CQLessService/UpdateCQLess"
	CQLessService_DeleteCQLess_FullMethodName = "/demo.v1.CQLessService/DeleteCQLess"
)

// CQLessServiceClient is the client API for CQLessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CQLessServiceClient interface {
	ListCQLesss(ctx context.Context, in *ListCQLesssRequest, opts ...grpc.CallOption) (*ListCQLesssResponse, error)
	GetCQLess(ctx context.Context, in *GetCQLessRequest, opts ...grpc.CallOption) (*CQLess, error)
	CreateCQLess(ctx context.Context, in *CreateCQLessRequest, opts ...grpc.CallOption) (*CQLess, error)
	UpdateCQLess(ctx context.Context, in *UpdateCQLessRequest, opts ...grpc.CallOption) (*CQLess, error)
	DeleteCQLess(ctx context.Context, in *DeleteCQLessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cQLessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCQLessServiceClient(cc grpc.ClientConnInterface) CQLessServiceClient {
	return &cQLessServiceClient{cc}
}

func (c *cQLessServiceClient) ListCQLesss(ctx context.Context, in *ListCQLesssRequest, opts ...grpc.CallOption) (*ListCQLesssResponse, error) {
	out := new(ListCQLesssResponse)
	err := c.cc.Invoke(ctx, CQLessService_ListCQLesss_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cQLessServiceClient) GetCQLess(ctx context.Context, in *GetCQLessRequest, opts ...grpc.CallOption) (*CQLess, error) {
	out := new(CQLess)
	err := c.cc.Invoke(ctx, CQLessService_GetCQLess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cQLessServiceClient) CreateCQLess(ctx context.Context, in *CreateCQLessRequest, opts ...grpc.CallOption) (*CQLess, error) {
	out := new(CQLess)
	err := c.cc.Invoke(ctx, CQLessService_CreateCQLess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cQLessServiceClient) UpdateCQLess(ctx context.Context, in *UpdateCQLessRequest, opts ...grpc.CallOption) (*CQLess, error) {
	out := new(CQLess)
	err := c.cc.Invoke(ctx, CQLessService_UpdateCQLess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cQLessServiceClient) DeleteCQLess(ctx context.Context, in *DeleteCQLessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CQLessService_DeleteCQLess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CQLessServiceServer is the server API for CQLessService service.
// All implementations must embed UnimplementedCQLessServiceServer
// for forward compatibility
type CQLessServiceServer interface {
	ListCQLesss(context.Context, *ListCQLesssRequest) (*ListCQLesssResponse, error)
	GetCQLess(context.Context, *GetCQLessRequest) (*CQLess, error)
	CreateCQLess(context.Context, *CreateCQLessRequest) (*CQLess, error)
	UpdateCQLess(context.Context, *UpdateCQLessRequest) (*CQLess, error)
	DeleteCQLess(context.Context, *DeleteCQLessRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCQLessServiceServer()
}

// UnimplementedCQLessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCQLessServiceServer struct {
}

func (UnimplementedCQLessServiceServer) ListCQLesss(context.Context, *ListCQLesssRequest) (*ListCQLesssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCQLesss not implemented")
}
func (UnimplementedCQLessServiceServer) GetCQLess(context.Context, *GetCQLessRequest) (*CQLess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCQLess not implemented")
}
func (UnimplementedCQLessServiceServer) CreateCQLess(context.Context, *CreateCQLessRequest) (*CQLess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCQLess not implemented")
}
func (UnimplementedCQLessServiceServer) UpdateCQLess(context.Context, *UpdateCQLessRequest) (*CQLess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCQLess not implemented")
}
func (UnimplementedCQLessServiceServer) DeleteCQLess(context.Context, *DeleteCQLessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCQLess not implemented")
}
func (UnimplementedCQLessServiceServer) mustEmbedUnimplementedCQLessServiceServer() {}

// UnsafeCQLessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CQLessServiceServer will
// result in compilation errors.
type UnsafeCQLessServiceServer interface {
	mustEmbedUnimplementedCQLessServiceServer()
}

func RegisterCQLessServiceServer(s grpc.ServiceRegistrar, srv CQLessServiceServer) {
	s.RegisterService(&CQLessService_ServiceDesc, srv)
}

func _CQLessService_ListCQLesss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCQLesssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CQLessServiceServer).ListCQLesss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CQLessService_ListCQLesss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CQLessServiceServer).ListCQLesss(ctx, req.(*ListCQLesssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CQLessService_GetCQLess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCQLessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CQLessServiceServer).GetCQLess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CQLessService_GetCQLess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CQLessServiceServer).GetCQLess(ctx, req.(*GetCQLessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CQLessService_CreateCQLess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCQLessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CQLessServiceServer).CreateCQLess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CQLessService_CreateCQLess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CQLessServiceServer).CreateCQLess(ctx, req.(*CreateCQLessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CQLessService_UpdateCQLess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCQLessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CQLessServiceServer).UpdateCQLess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CQLessService_UpdateCQLess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CQLessServiceServer).UpdateCQLess(ctx, req.(*UpdateCQLessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CQLessService_DeleteCQLess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCQLessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CQLessServiceServer).DeleteCQLess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CQLessService_DeleteCQLess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CQLessServiceServer).DeleteCQLess(ctx, req.(*DeleteCQLessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CQLessService_ServiceDesc is the grpc.ServiceDesc for CQLessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CQLessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.v1.CQLessService",
	HandlerType: (*CQLessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCQLesss",
			Handler:    _CQLessService_ListCQLesss_Handler,
		},
		{
			MethodName: "GetCQLess",
			Handler:    _CQLessService_GetCQLess_Handler,
		},
		{
			MethodName: "CreateCQLess",
			Handler:    _CQLessService_CreateCQLess_Handler,
		},
		{
			MethodName: "UpdateCQLess",
			Handler:    _CQLessService_UpdateCQLess_Handler,
		},
		{
			MethodName: "DeleteCQLess",
			Handler:    _CQLessService_DeleteCQLess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/v1/cqless.proto",
}
